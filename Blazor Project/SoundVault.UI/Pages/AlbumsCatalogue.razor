@page "/AlbumsCatalogue"

@inject AlbumService AlbumService
@inject GenderService GenderService
@inject NavigationManager NavigationManager

<h3 class="text-center mb-4 text-info">Album's Catalogue</h3>

@if (albums == null || !albums.Any())
{
    <h4 class="text-center text-warning">Loading...</h4>
}
else
{
    <div class="table-responsive" style="max-height: 550px; overflow-y: auto;">
        <table class="table table-striped table-hover table-bordered table-light">
            <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
                <tr>
                    <td style="width:35%;text-align:center">Title</td>
                    <td style="width:20%;text-align:center">Gender</td>
                    <td style="width:15%;text-align:center">Songs</td>
                    <td style="width:10%;text-align:center">Duration</td>
                    <td style="width:20%;text-align:center">Actions</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in albums)
                {
                    <tr>
                        <td>@a.Title</td>
                        <td>@a.Gender.Name</td>
                        <td>@a.SongCount</td>
                        <td>@a.TotalDuration</td>
                        <td>
                            <table style="width:100%">
                                <tr>
                                    <td style="text-align:left">
                                        <button class="btn btn-sm btn-warning w-100" @onclick="() => NavigateToDetailsAlbum(a.Id)">Update</button>
                                    </td>
                                    <td style="text-align:right">
                                        <button class="btn btn-sm btn-danger w-100" @onclick="() => Delete(a.Id)">Delete</button>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="table-responsive" style="max-height: 60px; overflow-y: visible;">
    <EditForm Model="@album" OnValidSubmit="AddAlbum">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationMessage For="@( () => album.Title)" />
        <ValidationMessage For="@( () => album.Gender)" />
        <ValidationMessage For="@( () => album.SongCount)" />
        <ValidationMessage For="@( () => album.TotalDuration)" />
        <table class="table table-striped table-hover table-bordered table-light">

            <thead>
                <tr>
                    <th style="width:35%">
                        <input type="text" @bind="album.Title" class="form-control form-control-sm" placeholder="Enter Album's name" style="width:95%" />
                    </th>
                    <th style="width:20%">

                        <select class="form-control form-control-sm" style="width:95%" @bind="album.GenderId">
                            <option value="">Select a gender</option>  <!-- Default option -->
                            @foreach(var gender in genders)
                            {
                                <option value="@gender.Id">@gender.Name</option>
                            }
                        </select>
                    </th>
                    <th style="width:15%">
                        <input type="number" min="1" @bind="album.SongCount" class="form-control form-control-sm" placeholder="Enter Album's song count" style="width:95%" />
                    </th>
                    <th style="width:10%">
                        <input type="text" @bind="album.TotalDuration" class="form-control form-control-sm" placeholder="Enter Album's duration" style="width:95%" />
                    </th>
                    <th style="width:20%">
                        <button class="btn btn-sm btn-success w-50">Add</button>
                    </th>
                </tr>
            </thead>
        </table>
    </EditForm>
</div>

@code {

    protected IEnumerable<Album> albums { get; set; } = new List<Album>();
    protected IEnumerable<Gender> genders { get; set; } = new List<Gender>();
    public Album album { get; set; } = new Album { GenderId = null };
    public string Message { get; set; }

    override protected async Task OnInitializedAsync()
    {
        try
        {
            albums = await AlbumService.GetAll();
            genders = await GenderService.GetAll();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    protected void NavigateToDetailsAlbum(int id)
    {
        NavigationManager.NavigateTo($"/AlbumsDetail/{id}");
    }

    protected async Task AddAlbum()
    {
        try
        {
            await AlbumService.Save(album);
            albums = await AlbumService.GetAll();
            album = new Album();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    protected async Task Delete(int id)
    {
        try
        {
            await AlbumService.Delete(id);
            albums = await AlbumService.GetAll();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }
}
