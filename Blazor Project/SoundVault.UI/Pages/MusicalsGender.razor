@page "/MusicalsGender"

@inject GenderService GenderService
@inject NavigationManager NavigationManager

<h3 class="text-center mb-4 text-info">Musical's Gender</h3>

@if (genders == null || !genders.Any())
{
    <h4 class="text-center text-warning">Loading...</h4>
}
else
{
    <div class="table-responsive" style="max-height: 550px; overflow-y: auto;">
        <table class="table table-striped table-hover table-bordered table-light">
            <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
                <tr>
                    <th style="width:75%; text-align:center">Name</th>
                    <th style="width:25%; text-align:center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var g in genders)
                {
                    <tr>
                        <!--<td>@g.Id</td> This field it's no necessary--> 
                        <td>@g.Name</td>
                        <td>
                            <table style="width:100%">
                                <tr>
                                    <td style="text-align:left">
                                        <button class="btn btn-sm btn-warning w-100" @onclick="() => NavigateToDetailsGener(g.Id)">Update</button>
                                    </td>
                                    <td style="text-align:right">
                                        <button class="btn btn-sm btn-danger w-100" @onclick="() => Delete(g.Id)">Delete</button>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <EditForm Model="gender" OnValidSubmit="AddGenres">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationMessage For="@( () => gender.Name)" />
        <div class="table-responsive" style="max-height: 50px; overflow-y: auto;">
            <table class="table table-striped table-hover table-bordered table-light">
                <thead>
                    <tr>
                        <td style="width:75%">
                            <input type="text" @bind="gender.Name" class="form-control form-control-sm" placeholder="Enter genre name" />
                        </td>
                        <td>
                            <table style="width:100%">
                                <tr>
                                    <td style="text-align:left">
                                        <button class="btn btn-sm btn-success w-50">Add</button>
                                    </td>
                                    <td style="text-align:right">
                                   
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </thead>
            </table>
        </div>
    </EditForm>
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger mt-4" role="alert">
            @Message
        </div>
    }
}

@code {

    protected IEnumerable<Gender> genders { get; set; } = new List<Gender>();
    public Gender gender { get; set; } = new Gender();
    public string Message { get; set; }

    override protected async Task OnInitializedAsync()
    {
        try
        {
            genders = await GenderService.GetAll();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    protected async Task AddGenres()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(gender.Name))
            {
                Message = "Name is required!";
                return;
            }

            await GenderService.Save(new Gender { Name = gender.Name });
            genders = await GenderService.GetAll();
            gender = new Gender();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    protected async Task Delete(int id)
    {
        try
        {
            await GenderService.Delete(id);
            genders = await GenderService.GetAll();
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }

    protected void NavigateToDetailsGener(int id)
    {
        NavigationManager.NavigateTo($"/MusicalsGenderDetails/{id}");
    }
}
